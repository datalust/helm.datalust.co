apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "seq.fullname" . }}
  labels:
    app: {{ template "seq.name" . }}
    chart: {{ template "seq.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: {{ template "seq.name" . }}
      release: {{ .Release.Name }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: {{ template "seq.name" . }}
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{- default .Chart.AppVersion .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: "ACCEPT_EULA"
              value: "{{ .Values.acceptEULA }}"
{{- if .Values.baseURI }}
            - name: "SEQ_API_CANONICALURI"
              value: "{{ .Values.baseURI }}"
{{- end }}
{{- if .Values.listenURI }}
            - name: SEQ_API_LISTENURIS
              value: "{{ .Values.listenURI }}"
{{- end }}
{{- if .Values.firstRunAdminUsername }}
            - name: "SEQ_FIRSTRUN_ADMINUSERNAME"
              value: "{{ .Values.firstRunAdminUsername }}"
{{- end }}
{{- if or .Values.firstRunAdminPassword .Values.firstRunAdminPasswordSecret }}
            - name: "SEQ_FIRSTRUN_ADMINPASSWORD"
{{- if .Values.firstRunAdminPassword }}
              value: "{{ .Values.firstRunAdminPassword }}"
{{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ required "A valud .Values.firstRunAdminPasswordSecret.name is required" .Values.firstRunAdminPasswordSecret.name | quote }}
                  key: {{ required "A valud .Values.firstRunAdminPasswordSecret.key is required" .Values.firstRunAdminPasswordSecret.key | quote }}
{{- end }}
{{- end }}
{{- if or .Values.firstRunAdminPasswordHash .Values.firstRunAdminPasswordHashSecret }}
            - name: "SEQ_FIRSTRUN_ADMINPASSWORDHASH"
{{- if .Values.firstRunAdminPasswordHash }}
              value: "{{ .Values.firstRunAdminPasswordHash }}"
{{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ required "A valud .Values.firstRunAdminPasswordHashSecret.name is required" .Values.firstRunAdminPasswordHashSecret.name | quote }}
                  key: {{ required "A valud .Values.firstRunAdminPasswordHashSecret.key is required" .Values.firstRunAdminPasswordHashSecret.key | quote }}
{{- end }}
{{- end }}
{{- if .Values.firstRunRequireAuthenticationForHttpIngestion }}
            - name: "SEQ_FIRSTRUN_REQUIREAUTHENTICATIONFORHTTPINGESTION"
              value: "{{ .Values.firstRunRequireAuthenticationForHttpIngestion }}"
{{- end }}
{{- if .Values.firstRunNoAuthentication }}
            - name: "SEQ_FIRSTRUN_NOAUTHENTICATION"
              value: "True"
{{- end }}
{{- if .Values.extraEnvs }}
{{ toYaml .Values.extraEnvs | indent 12 }}
{{- end }}
          ports:
            - name: ingestion
              containerPort: {{ .Values.ingestion.containerPort }}
              protocol: TCP
            - name: ui
              containerPort: {{ .Values.ui.containerPort }}
              protocol: TCP
          securityContext:
{{ toYaml .Values.securityContext | indent 12 }}
{{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /
              port: ui
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
{{- end }}
{{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /
              port: ui
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
{{- end }}
{{- if .Values.startupProbe.enabled }}
          startupProbe:
            httpGet:
              path: /
              port: ui
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
{{- end }}
          volumeMounts:
            - name: seq-data
              mountPath: {{ .Values.persistence.path }}
              subPath: {{ .Values.persistence.subPath }}
{{- if .Values.extraVolumeMounts }}
{{ toYaml .Values.extraVolumeMounts | indent 12 }}
{{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
{{- if .Values.gelf.enabled }}
        - name: {{ .Chart.Name }}-gelf
          image: "{{ .Values.gelf.image.repository }}:{{- default "latest" .Values.gelf.image.tag }}"
          imagePullPolicy: {{ .Values.gelf.image.pullPolicy }}
          env:
            - name: "SEQ_ADDRESS"
              value: "http://localhost:{{ .Values.ingestion.service.port }}"
            - name: "SEQ_API_KEY"
              value: "{{ .Values.gelf.apiKey }}"
            - name: "GELF_ADDRESS"
              value: "{{ .Values.gelf.service.protocol | lower }}://0.0.0.0:12201"
            - name: "GELF_ENABLE_DIAGNOSTICS"
              value: "True"
          ports:
            - name: gelf
              containerPort: 12201
              protocol: {{ .Values.gelf.service.protocol }}
          securityContext:
{{ toYaml .Values.gelf.securityContext | indent 12 }}
{{- end }}
{{- if .Values.syslog.enabled }}
        - name: {{ .Chart.Name }}-syslog
          image: "{{ .Values.syslog.image.repository }}:{{- default "latest" .Values.syslog.image.tag }}"
          imagePullPolicy: {{ .Values.syslog.image.pullPolicy }}
          env:
            - name: "SEQ_ADDRESS"
              value: "http://localhost:{{ .Values.ingestion.service.port }}"
            - name: "SEQ_API_KEY"
              value: "{{ .Values.syslog.apiKey }}"
            - name: "SYSLOG_ADDRESS"
              value: "{{ .Values.syslog.service.protocol | lower }}://0.0.0.0:514"
            - name: "SYSLOG_ENABLE_DIAGNOSTICS"
              value: "True"
          ports:
            - name: syslog
              containerPort: 514
              protocol: {{ .Values.syslog.service.protocol }}
          securityContext:
{{ toYaml .Values.syslog.securityContext | indent 12 }}
{{- end }}
{{- with .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}
{{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
{{- end }}
      serviceAccountName: "{{ template "seq.serviceAccountName" . }}"
      volumes:
        - name: seq-data
{{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (include "seq.fullname" .) }}
{{- else }}
          emptyDir: {}
{{- end }}
{{- if .Values.extraVolumes }}
{{ toYaml .Values.extraVolumes | indent 8 }}
{{- end }}

# At least one of the default password variables must be set; note that this ignores SEQ_PASSWORD, but
# that variable is just a convenience alias for SEQ_FIRSTRUN_ADMINPASSWORD anyway.
{{- if not (or .Values.firstRunNoAuthentication .Values.firstRunAdminPassword .Values.firstRunAdminPasswordHash .Values.firstRunAdminPasswordSecret .Values.firstRunAdminPasswordHashSecret) }}
{{- fail "One of firstRunAdminPassword or firstRunAdminPasswordHash or firstRunAdminPasswordSecret or firstRunAdminPasswordHashSecret must be specified." }}
{{- end }}
